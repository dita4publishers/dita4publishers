<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "urn:pubid:dita4publishers.org:doctypes:dita:concept" "urn:pubid:dita4publishers.org:doctypes:dita:concept">
<concept id="conceptId">
 <title>Mapping XML Elements to InDesign Paragraph and Character Styles</title>
 <shortdesc>You define the mapping of elements to specific character and paragraph styles using simple XSLT templates.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>elements in context<indexterm>mapping to InDesign styles</indexterm></indexterm>
        <indexterm>InDesign styles<indexterm>mapping elements in context to</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
 <conbody>
   <p>Unlike the Word-to-DITA transformation framework, which uses a separate configuration file to define the mapping of Word paragraphs to DITA elements, the DITA-to-InDesign process uses XSLT modules with very simple XSLT templates. The reason for this is that the only way to fully support mapping arbitrary elements in context to styles is to use XPath or something equivalent to it and it would be harder to define and implement a separate configuration specification that gave you that power than it would to simply code the XSLT directly.</p>
    <p>The base DITA-to-InDesign transform includes a module named <filepath>elem2styleMapper.xsl</filepath>, which defines the default mapping for DITA elements to paragraph and character style names. However, it is unlikely that this mapping will work for some or even any of your content, since the style names need to match your InDesign templates. Thus you will likely need to create your own element-to-style mapper module that extends or overrides the base mapping, either as an extension to the DITA2InDesign plugin or via a custom top-level transform that includes your custom mapper as well as the base DITA2InDesign transform.</p>
    <p>The element-to-style mapper looks like this:<codeblock>&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
      xmlns:xs="http://www.w3.org/2001/XMLSchema"
      xmlns:local="urn:local-functions"
      xmlns:df="http://dita2indesign.org/dita/functions"
      xmlns:e2s="http//dita2indesign.org/functions/element-to-style-mapping"
      exclude-result-prefixes="xs local df e2s"
      version="2.0">
  
  &lt;!-- Element-to-style mapper
    
    This module provides the base implementation for
    the "style-map" modes, which map elements in context
    to InDesign style names (paragraph, character, frame,
    object, table).
    
    Copyright (c) 2009 Really Strategies, Inc.
    
    NOTE: This material is intended to be donated to the RSI-sponsored
    DITA2InDesign open-source project.
  -->
  &lt;xsl:import href="../lib/dita-support-lib.xsl"/>
  &lt;xsl:import href="lib/incx_generation_util.xsl"/>
  
<b>  &lt;xsl:template match="/*[df:class(., 'topic/topic')]/*[df:class(., 'topic/title')]" 
    mode="style-map-pstyle">
    &lt;xsl:sequence select="'Topic Title 1'"/>
  &lt;/xsl:template></b>
  
  &lt;xsl:template match="/*[df:class(., 'topic/topic')]/*[df:class(., 'topic/topic')]/*[df:class(., 'topic/title')]" 
    mode="style-map-pstyle">
    &lt;xsl:sequence select="'Topic Title 2'"/>
  &lt;/xsl:template>

  ...

  &lt;xsl:template match="*[df:class(., 'topic/ph')]" 
    mode="style-map-cstyle" priority="0.75">
    &lt;xsl:sequence select="'[No character style]'"/>
  &lt;/xsl:template>
  
<b>  &lt;xsl:template match="*[df:class(., 'topic/cite')]" 
    mode="style-map-cstyle">
    &lt;xsl:sequence select="'italic'"/>
  &lt;/xsl:template></b>

  ...

&lt;/xsl:stylesheet></codeblock></p>
    <p>The module provides templates for two different XSLT modes; style-map-pstyle and style-map-cstyle.</p>
    <p>The style-map-pstyle templates map elements in context to paragraph style names. The style-map-cstyle templates map elements to character style names. Note that the same XML element may map to both paragraphs and character runs in different contexts.</p>
    <p>Each template does nothing other than produce a literal string that is the InDesign style name. </p>
    <p>Looking at the first highlighted template above, the parts are:<simpletable
      frame="all"
      relcolwidth="1.0* 1.0*">
      <sthead>
        <stentry>Component</stentry>
        <stentry>Meaning</stentry>
      </sthead>
      <strow>
        <stentry><codeph>match="/*[df:class(., 'topic/topic')]/*[df:class(., 'topic/title')]"</codeph></stentry>
        <stentry>The match statement that matches a specific context. The value of the <xmlatt>match</xmlatt> attribute is an XPath expression. Here it uses the DITA Support Library "df:class" function to match on elements based on their DITA <xmlatt>class</xmlatt> values rather than their tagnames, e.g., title within a topic that is the root of the document (as indicated by the leading "/" in the XPath expression).</stentry>
      </strow>
      <strow>
        <stentry><codeph>mode="style-map-pstyle"</codeph></stentry>
        <stentry>The XSLT mode this template is used in, in this case "style-map-pstyle", indicating a template that maps to a paragraph style name. The other possible mode is "style-map-cstyle"</stentry>
      </strow>
      <strow>
        <stentry><codeph>&lt;xsl:sequence select="'Topic Title 1'"/></codeph></stentry>
        <stentry>An XSLT 2 sequence constructor used to produce the literal string "Topic Title 1" per the value of the <xmlatt>select</xmlatt> attribute. Note the single quotes within the double quotes of the attribute specification. The style name string is the style display name as it appears in the InDesign user interface.</stentry>
      </strow>
      </simpletable></p>
    <p>The second highlighted example follows exactly the same pattern, differing only in the name of the mode ("style-map-cstyle") .</p>
    <p>Your custom element-to-style mappings should follow the same pattern, differing only in the details of the <xmlatt>match</xmlatt> expression and the style name produced.</p>
    <p>The only other thing you may need to add is a <xmlatt>priority</xmlatt>
      attribute when you need to have templates for more-specialized elements
      that would otherwise match on a template for the specialization's ancestor
      types. In that case, you must specify a <xmlatt>priority</xmlatt>
      attribute on the <xmlelement>xsl:template</xmlelement> element with a value
      greater than 1, e.g., <codeph>&lt;xsl:template priority="10" ...</codeph>
      or whatever number ensures the template will match before other templates
      the element might have matched on.</p>
    <p>For example, say your vocabulary includes a specialization of <xmlelement>ph</xmlelement> named "foo" and a specialization of "foo" named "bar". You want <xmlelement>foo</xmlelement> to map to the paragraph style "Foo" but <xmlelement>bar</xmlelement> to map to the paragraph style "Bar". You start by creating these two match templates:<codeblock>  &lt;xsl:template match="*[df:class(., 'foodomain-d/foo')]" 
    mode="style-map-pstyle">
    &lt;xsl:sequence select="'Foo'"/>
  &lt;/xsl:template>

  &lt;xsl:template match="*[df:class(., 'bardomain-d/bar')]" 
    mode="style-map-pstyle">
    &lt;xsl:sequence select="'Bar'"/>
  &lt;/xsl:template></codeblock></p>
    <p>If you used these templates as is you would get "ambiguous rule match" messages for <xmlelement>bar</xmlelement> elements because <xmlelement>bar</xmlelement> is a specialization of <xmlelement>foo</xmlelement> and thus matches both on a check for foo as well as bar (that is, the <xmlatt>class</xmlatt> value for <xmlelement>bar</xmlelement> would be something like "<codeph>+ topic/ph foodomain-d/foo bardomain-d/bar </codeph>").</p>
    <p>To remove the ambiguity you would add a <xmlatt>priority</xmlatt> attribute to the template for <xmlelement>bar</xmlelement>, forcing it to match first:<codeblock>  &lt;xsl:template match="*[df:class(., 'bardomain-d/bar')]" 
    <b>priority="10"</b>
    mode="style-map-pstyle">
    &lt;xsl:sequence select="'Bar'"/>
  &lt;/xsl:template></codeblock></p>
    <p>Now when you run the transform all the <xmlelement>bar</xmlelement> elements will map to the style 'Bar' as you intended.</p>
    <p>The <xmlatt>priority</xmlatt> value of "0.75" for the template for the <xmlelement>ph</xmlelement> element in the example above puts it's priority <i>below</i> the default priority of "1", ensuring that the template for <xmlelement>ph</xmlelement> will not interfere with any templates for specializations of <xmlelement>ph</xmlelement>.</p>
    <p>To create your own mapping module, simply copy the base <filepath>elem2styleMap.xsl</filepath> file to a new location, normally a Toolkit plugin for your extensions, remove all the templates you don't want to override, modify the ones you do, and add any additional mappings you need.</p>
    <p>If these mappings should be global to all InCopy generations in your
      environment you can use the module as a Toolkit-provided extension to the
      base DITA2InDesign transformation type.</p>
    <p>If, as is more likely, your mappings are for a specific use and not global to all InCopy transforms, then you must create a new plugin with a new top-level transform that includes your mapping module and the base dita2indesign.xsl transform.</p>
 </conbody>
</concept>
