<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "urn:pubid:dita4publishers.org:doctypes:dita:concept" "urn:pubid:dita4publishers.org:doctypes:dita:concept">
<concept id="conceptId">
 <title>Map-Driven Processing</title>
 <shortdesc>Using and extending the DITA for Publishers map-driven processing
    framework</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>HTML<indexterm>generating</indexterm></indexterm>
        <indexterm>map-driven processing<indexterm>using</indexterm></indexterm>
        <indexterm>maps<indexterm>processing topics in terms
          of</indexterm></indexterm>
        <indexterm>topics<indexterm>processing in map
          context</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
 <conbody>
   <p>DITA for Publishers provides general map-driven processing whereby the
      output generation for each topic is driven by processing of the root input
      map. This allows each topic to be processed with full knowledge of its use
      context in the map. This in turn enables a number of important functions:<ul>
      <li>Numbering of topics and within-topic elements in terms of the topicref
        hierarchy in the map ("enumeration").</li>
      <li>Processing of topics in terms of semantics imposed by topicrefs (e.g.,
        processing a generic topic as a "chapter" because it is referenced by a
        <xmlelement>chapter</xmlelement> topicref).</li>
      <li>Distinguishing separate uses of the same topic within a map in order
        to do automatic chunking and link rewriting.</li>
      <li>Generating output files in a structure different from the source file
        organization structure.</li>
      <li>Generation of literal files for topic heads as though the topic heads
        were references to title-only topics.</li>
      <li>Generation of a back-of-the-book indexes, glossaries, and other
        publication-scope lists.</li>
      </ul></p>
    <p>The map-driven processing is used by all the DITA for Publishers
      transformation types, including HTML2, HTML5, EPUB, and Kindle. It is
      intended to be a general facility that can be used with any output
      type.</p>
    <note>The map-driven framework could also be used to generate PDF. However,
      the current architecture of the base Toolkit PDF transform does not lend
      itself to easily being reworked to replace its map-merge-based approach
      with a map-driven approach.</note>
    <p>The general processing model uses two main phases:<ol
      id="ol_izv_h2d_rh">
      <li>Data collection</li>
      <li>Output generation</li>
      </ol></p>
    <p>The data collection phase operates on the map and its topics to build up
      a single XML structure that contains the information needed to do the following:<ul
      id="ul_zgw_l2d_rh">
      <li>Number things using normal XSLT numbering facilities (e.g.,
        <xmlelement>xsl:number</xmlelement>) (enumeration
        support).<indexterm>enumeration<indexterm>data collection
        for</indexterm></indexterm><indexterm>numbering<indexterm>of things with
        titles</indexterm></indexterm></li>
      <li>Index entries grouped and sorted for use in generating
        back-of-the-book indexes<indexterm>index generation</indexterm></li>
      <li>Glossary entries grouped and sorted for use in generating glossary
        lists<indexterm>glossary entries<indexterm>grouping and
        sorting</indexterm></indexterm></li>
      </ul></p>
    <p>The output generation phase produces whatever the final result is, e.g.,
      HTML. All output generation phase processing is provided the collected
      data as a tunnel parameter named "collected-data". You can access this
      variable by adding the following <xmlelement>xsl:param</xmlelement> to any
      template:<codeblock>&lt;xsl:template ...>
  <b>&lt;xsl:param name="collected-data" as="element()" tunnel="yes"/></b>
  ...
&lt;/xsl:></codeblock></p>
    <p>You can extend the data collection processing using any of several
      defined extension points.</p>
 </conbody>
</concept>
